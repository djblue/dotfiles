G__11802='IyByZWxvYWQgfi8udG11eC5jb25mIHVzaW5nIFBSRUZJWCByCmJpbmQgciBzb3VyY2UtZmlsZSB+Ly50bXV4LmNvbmYgXDsgZGlzcGxheSAifi8udG11eC5jb25mIGlzIHJlbG9hZGVkIgoKIyBlbmFibGUgbW91c2UgaW5wdXQKc2V0IC1nIG1vdXNlIG9uCgojIGVuYWJsZSBiZXR0ZXIgY29sb3Igc3VwcG9ydApzZXQgLWcgZGVmYXVsdC10ZXJtaW5hbCAic2NyZWVuLTI1NmNvbG9yIgoKIyBhY3QgbGlrZSB2aW0Kc2V0dyAtZyBtb2RlLWtleXMgdmkKYmluZCBoIHNlbGVjdC1wYW5lIC1MCmJpbmQgaiBzZWxlY3QtcGFuZSAtRApiaW5kIGsgc2VsZWN0LXBhbmUgLVUKYmluZCBsIHNlbGVjdC1wYW5lIC1SCgojIFNldHVwICd2JyB0byBiZWdpbiBzZWxlY3Rpb24gYXMgaW4gVmltCmJpbmQta2V5IC10IHZpLWNvcHkgdiBiZWdpbi1zZWxlY3Rpb24KYmluZC1rZXkgLXQgdmktY29weSB5IGNvcHktcGlwZSAicmVhdHRhY2gtdG8tdXNlci1uYW1lc3BhY2UgcGJjb3B5IgoKIyBVcGRhdGUgZGVmYXVsdCBiaW5kaW5nIG9mIGBFbnRlcmAgdG8gYWxzbyB1c2UgY29weS1waXBlCnVuYmluZCAtdCB2aS1jb3B5IEVudGVyCmJpbmQta2V5IC10IHZpLWNvcHkgRW50ZXIgY29weS1waXBlICJyZWF0dGFjaC10by11c2VyLW5hbWVzcGFjZSBwYmNvcHkiCgojIHR1cm4gdGhlIHN0YXR1cyBiYXIgb2ZmCnNldC1vcHRpb24gLWcgc3RhdHVzIG9mZgoKIyB2ZXJ0aWNhbC9ob3Jpem9udGFsIHNwbGl0CmJpbmQgfCBzcGxpdC13aW5kb3cgLWgKYmluZCAtIHNwbGl0LXdpbmRvdyAtdgo='
G__11798='IyEvYmluL2Jhc2gKCmlmICEgWyAteCAiJChjb21tYW5kIC12IG52aW0pIiBdOyB0aGVuCiAgdmltICRACiAgZXhpdCAkPwpmaQoKcm9vdD0iJEhPTUUvcmVwb3MvZG90ZmlsZXMiCgpwYXJzZS1hcmdzKCkgewogIGxvY2FsIGZvdW5kPTAKICBmb3IgYXJnIGluICRAOyBkbwogICAgbG9jYWwgZmlsZT0iJHJvb3Qvc3JjLyQoZWNobyAkYXJnIHwgc2VkIC1FICdzLy4qXC4oLiopL1wxLycpIgogICAgaWYgWyAtZiAkZmlsZSBdOyB0aGVuCiAgICAgIGZvdW5kPTEKICAgICAgcHJpbnRmICIkZmlsZSAiCiAgICBlbHNlCiAgICAgIHByaW50ZiAiJGFyZyAiCiAgICBmaQogIGRvbmUKICByZXR1cm4gJGZvdW5kCn0KCmFyZ3M9JChwYXJzZS1hcmdzICRAKQoKaWYgWyAiJD8iID09ICIxIiBdOyB0aGVuCiAgY2QgJHJvb3QKICB0cmFwICJleGl0IiBJTlQgVEVSTQogIHRyYXAgImtpbGwgMCIgRVhJVAogIGNsb2p1cmUgLUFzZXJ2ZXIgPiBzZXJ2ZXIubG9nIDI+JjEgJgogIE5WSU1fTElTVEVOX0FERFJFU1M9MTI3LjAuMC4xOjc3NzcgbnZpbSAkYXJncwplbHNlCiAgdmltICRACmZpCgo='
G__11804='W3VzZXJdCgllbWFpbCA9IGEucy5iYWRhaGRhaEBnbWFpbC5jb20KCW5hbWUgPSBDaHJpcyBCYWRhaGRhaApbcHVzaF0KCWRlZmF1bHQgPSBzaW1wbGUKW2NvcmVdCgllZGl0b3IgPSB2aW0KCWF1dG9jcmxmID0gZmFsc2UKW2NvbG9yXQoJdWkgPSB0cnVlCltkaWZmdG9vbF0KCXByb21wdCA9IGZhbHNlClttZXJnZV0KCXRvb2wgPSB2aW1kaWZmCg=='
G__11807='c2V0IHJ1bnRpbWVwYXRoXj1+Ly52aW0gcnVudGltZXBhdGgrPX4vLnZpbS9hZnRlcgpsZXQgJnBhY2twYXRoID0gJnJ1bnRpbWVwYXRoCnNvdXJjZSB+Ly52aW1yYwo='
G__11801='IyB+Ly5wcm9maWxlOiBleGVjdXRlZCBieSB0aGUgY29tbWFuZCBpbnRlcnByZXRlciBmb3IgbG9naW4gc2hlbGxzLgojIFRoaXMgZmlsZSBpcyBub3QgcmVhZCBieSBiYXNoKDEpLCBpZiB+Ly5iYXNoX3Byb2ZpbGUgb3Igfi8uYmFzaF9sb2dpbgojIGV4aXN0cy4KIyBzZWUgL3Vzci9zaGFyZS9kb2MvYmFzaC9leGFtcGxlcy9zdGFydHVwLWZpbGVzIGZvciBleGFtcGxlcy4KIyB0aGUgZmlsZXMgYXJlIGxvY2F0ZWQgaW4gdGhlIGJhc2gtZG9jIHBhY2thZ2UuCgojIHRoZSBkZWZhdWx0IHVtYXNrIGlzIHNldCBpbiAvZXRjL3Byb2ZpbGU7IGZvciBzZXR0aW5nIHRoZSB1bWFzawojIGZvciBzc2ggbG9naW5zLCBpbnN0YWxsIGFuZCBjb25maWd1cmUgdGhlIGxpYnBhbS11bWFzayBwYWNrYWdlLgojdW1hc2sgMDIyCgojIHNldCBQQVRIIHNvIGl0IGluY2x1ZGVzIHVzZXIncyBwcml2YXRlIGJpbiBpZiBpdCBleGlzdHMKaWYgWyAtZCAiJEhPTUUvYmluIiBdOyB0aGVuCiAgICBQQVRIPSIkSE9NRS9iaW46JFBBVEgiCmZpCgppZiBbIC1kICIkSE9NRS9nbyIgXTsgdGhlbgogICAgZXhwb3J0IEdPUEFUSD0iJEhPTUUvZ28iCiAgICBQQVRIPSIkSE9NRS9nby9iaW46JFBBVEgiCmZpCgojIGxvYWQgYWxpYXNlcwpzb3VyY2Ugfi8uYWxpYXNlcwo='
G__11800='IyB+Ly5iYXNocmM6IGV4ZWN1dGVkIGJ5IGJhc2goMSkgZm9yIG5vbi1sb2dpbiBzaGVsbHMuICAjIHNlZSAvdXNyL3NoYXJlL2RvYy9iYXNoL2V4YW1wbGVzL3N0YXJ0dXAtZmlsZXMgKGluIHRoZSBwYWNrYWdlIGJhc2gtZG9jKQojIGZvciBleGFtcGxlcwoKVEVSTT14dGVybS1jb2xvcgoKIyBJZiBub3QgcnVubmluZyBpbnRlcmFjdGl2ZWx5LCBkb24ndCBkbyBhbnl0aGluZwpjYXNlICQtIGluCiAgICAqaSopIDs7CiAgICAgICopIHJldHVybjs7CmVzYWMKCiMgZG9uJ3QgcHV0IGR1cGxpY2F0ZSBsaW5lcyBvciBsaW5lcyBzdGFydGluZyB3aXRoIHNwYWNlIGluIHRoZSBoaXN0b3J5LgojIFNlZSBiYXNoKDEpIGZvciBtb3JlIG9wdGlvbnMKSElTVENPTlRST0w9aWdub3JlYm90aAoKIyBhcHBlbmQgdG8gdGhlIGhpc3RvcnkgZmlsZSwgZG9uJ3Qgb3ZlcndyaXRlIGl0CnNob3B0IC1zIGhpc3RhcHBlbmQKCiMgZm9yIHNldHRpbmcgaGlzdG9yeSBsZW5ndGggc2VlIEhJU1RTSVpFIGFuZCBISVNURklMRVNJWkUgaW4gYmFzaCgxKQpISVNUU0laRT0xMDAwCkhJU1RGSUxFU0laRT0yMDAwCgojIGNoZWNrIHRoZSB3aW5kb3cgc2l6ZSBhZnRlciBlYWNoIGNvbW1hbmQgYW5kLCBpZiBuZWNlc3NhcnksCiMgdXBkYXRlIHRoZSB2YWx1ZXMgb2YgTElORVMgYW5kIENPTFVNTlMuCnNob3B0IC1zIGNoZWNrd2luc2l6ZQoKIyBtYWtlIGxlc3MgbW9yZSBmcmllbmRseSBmb3Igbm9uLXRleHQgaW5wdXQgZmlsZXMsIHNlZSBsZXNzcGlwZSgxKQpbIC14IC91c3IvYmluL2xlc3NwaXBlIF0gJiYgZXZhbCAiJChTSEVMTD0vYmluL3NoIGxlc3NwaXBlKSIKCiMgc2V0IHZhcmlhYmxlIGlkZW50aWZ5aW5nIHRoZSBjaHJvb3QgeW91IHdvcmsgaW4gKHVzZWQgaW4gdGhlIHByb21wdCBiZWxvdykKaWYgWyAteiAiJHtkZWJpYW5fY2hyb290Oi19IiBdICYmIFsgLXIgL2V0Yy9kZWJpYW5fY2hyb290IF07IHRoZW4KICAgIGRlYmlhbl9jaHJvb3Q9JChjYXQgL2V0Yy9kZWJpYW5fY2hyb290KQpmaQoKIyBzZXQgYSBmYW5jeSBwcm9tcHQgKG5vbi1jb2xvciwgdW5sZXNzIHdlIGtub3cgd2UgIndhbnQiIGNvbG9yKQpjYXNlICIkVEVSTSIgaW4KICAgIHh0ZXJtLWNvbG9yKSBjb2xvcl9wcm9tcHQ9eWVzOzsKZXNhYwoKIyB1bmNvbW1lbnQgZm9yIGEgY29sb3JlZCBwcm9tcHQsIGlmIHRoZSB0ZXJtaW5hbCBoYXMgdGhlIGNhcGFiaWxpdHk7IHR1cm5lZAojIG9mZiBieSBkZWZhdWx0IHRvIG5vdCBkaXN0cmFjdCB0aGUgdXNlcjogdGhlIGZvY3VzIGluIGEgdGVybWluYWwgd2luZG93CiMgc2hvdWxkIGJlIG9uIHRoZSBvdXRwdXQgb2YgY29tbWFuZHMsIG5vdCBvbiB0aGUgcHJvbXB0CmZvcmNlX2NvbG9yX3Byb21wdD15ZXMKCmlmIFsgLW4gIiRmb3JjZV9jb2xvcl9wcm9tcHQiIF07IHRoZW4KICAgIGlmIFsgLXggL3Vzci9iaW4vdHB1dCBdICYmIHRwdXQgc2V0YWYgMSA+Ji9kZXYvbnVsbDsgdGhlbgoJIyBXZSBoYXZlIGNvbG9yIHN1cHBvcnQ7IGFzc3VtZSBpdCdzIGNvbXBsaWFudCB3aXRoIEVjbWEtNDgKCSMgKElTTy9JRUMtNjQyOSkuIChMYWNrIG9mIHN1Y2ggc3VwcG9ydCBpcyBleHRyZW1lbHkgcmFyZSwgYW5kIHN1Y2gKCSMgYSBjYXNlIHdvdWxkIHRlbmQgdG8gc3VwcG9ydCBzZXRmIHJhdGhlciB0aGFuIHNldGFmLikKCWNvbG9yX3Byb21wdD15ZXMKICAgIGVsc2UKCWNvbG9yX3Byb21wdD0KICAgIGZpCmZpCgppZiBbICIkY29sb3JfcHJvbXB0IiA9IHllcyBdOyB0aGVuCiAgICBQUzE9JyR7ZGViaWFuX2Nocm9vdDorKCRkZWJpYW5fY2hyb290KX1cW1wwMzNbMDE7MzJtXF1cdUBcaFxbXDAzM1swMG1cXTpcW1wwMzNbMDE7MzRtXF1cd1xbXDAzM1swMG1cXVwkICcKZWxzZQogICAgUFMxPScke2RlYmlhbl9jaHJvb3Q6KygkZGViaWFuX2Nocm9vdCl9XHVAXGg6XHdcJCAnCmZpCnVuc2V0IGNvbG9yX3Byb21wdCBmb3JjZV9jb2xvcl9wcm9tcHQKCiMgSWYgdGhpcyBpcyBhbiB4dGVybSBzZXQgdGhlIHRpdGxlIHRvIHVzZXJAaG9zdDpkaXIKY2FzZSAiJFRFUk0iIGluCnh0ZXJtKnxyeHZ0KikKICAgIFBTMT0iXFtcZV0wOyR7ZGViaWFuX2Nocm9vdDorKCRkZWJpYW5fY2hyb290KX1cdUBcaDogXHdcYVxdJFBTMSIKICAgIDs7CiopCiAgICA7Owplc2FjCgoKIyBBZGQgYW4gImFsZXJ0IiBhbGlhcyBmb3IgbG9uZyBydW5uaW5nIGNvbW1hbmRzLiAgVXNlIGxpa2Ugc286CiMgICBzbGVlcCAxMDsgYWxlcnQKYWxpYXMgYWxlcnQ9J25vdGlmeS1zZW5kIC0tdXJnZW5jeT1sb3cgLWkgIiQoWyAkPyA9IDAgXSAmJiBlY2hvIHRlcm1pbmFsIHx8IGVjaG8gZXJyb3IpIiAiJChoaXN0b3J5fHRhaWwgLW4xfHNlZCAtZSAnXCcncy9eXHMqWzAtOV1cK1xzKi8vO3MvWzsmfF1ccyphbGVydCQvLydcJycpIicKCiMgZW5hYmxlIHByb2dyYW1tYWJsZSBjb21wbGV0aW9uIGZlYXR1cmVzICh5b3UgZG9uJ3QgbmVlZCB0byBlbmFibGUKIyB0aGlzLCBpZiBpdCdzIGFscmVhZHkgZW5hYmxlZCBpbiAvZXRjL2Jhc2guYmFzaHJjIGFuZCAvZXRjL3Byb2ZpbGUKIyBzb3VyY2VzIC9ldGMvYmFzaC5iYXNocmMpLgppZiAhIHNob3B0IC1vcSBwb3NpeDsgdGhlbgogIGlmIFsgLWYgL3Vzci9zaGFyZS9iYXNoLWNvbXBsZXRpb24vYmFzaF9jb21wbGV0aW9uIF07IHRoZW4KICAgIC4gL3Vzci9zaGFyZS9iYXNoLWNvbXBsZXRpb24vYmFzaF9jb21wbGV0aW9uCiAgZWxpZiBbIC1mIC9ldGMvYmFzaF9jb21wbGV0aW9uIF07IHRoZW4KICAgIC4gL2V0Yy9iYXNoX2NvbXBsZXRpb24KICBmaQpmaQoKIyBDdXN0b20gcHJvbXB0CmV4cG9ydCBQUk9NUFRfQ09NTUFORD1wcm9tcHQKCnJlc2V0PSdcW1wwMzNbMG1cXScKCnllbGxvdz0nXFtcZVswOzMzbVxdJwpibHVlPSdcW1xlWzA7MzRtXF0nCnJlZD0nXFtcZVswOzMxbVxdJwpncmVlbj0nXFtcZVswOzMybVxdJwpwdXJwbGU9J1xbXGVbMDszNW1cXScKCmZ1bmN0aW9uIHN0YXR1c19jb2RlICgpIHsKICBpZiBbICIkMSIgPT0gIjAiIF07IHRoZW4KICAgIGVjaG8gJycKICBlbHNlCiAgICBlY2hvICIkMSAiCiAgZmkKfQoKCmZ1bmN0aW9uIGN1cnJlbnRfYnJhbmNoIHsKICAjIGlzIHRoZSBjdXJyZW50IGJyYW5jaCBkaXJ0eQogIFtbICQoZ2l0IGRpZmYgLS1zaG9ydHN0YXQgMj4gL2Rldi9udWxsIHwgdGFpbCAtbjEpICE9ICIiIF1dICYmIGVjaG8gLW4gIioiCgogICMgY3VycmVudCBnaXQgYnJhbmNoCiAgZWNobyAkKGdpdCByZXYtcGFyc2UgLS1hYmJyZXYtcmVmIEhFQUQgMj4gL2Rldi9udWxsKQp9CgoKZnVuY3Rpb24gcHJvbXB0ICgpIHsKCiAgbG9jYWwgZXhpdD0iJD8iCiAgcmV0PSIkcmVkJChzdGF0dXNfY29kZSAkZXhpdCkkcmVzZXQiCgogIHVzZXI9IiRibHVlXHUkcmVzZXQiCiAgaG9zdD0iJHllbGxvd1xoJHJlc2V0IgogIGRpcj0iJGdyZWVuXHckcmVzZXQiCgogIGJyYW5jaD0iJChjdXJyZW50X2JyYW5jaCkiCiAgaWYgWyAiJGJyYW5jaCIgIT0gIiIgXTsgdGhlbgogICAgYnJhbmNoPSJvbiAkcmVkJGJyYW5jaCRyZXNldCIKICBmaQoKICBQUzE9IiR7cmV0fSR7dXNlcn0gYXQgJHtob3N0fSBpbiAke2Rpcn0gJHticmFuY2h9XG4lICIKfQoKc291cmNlIH4vLnByb2ZpbGUK'
G__11811='IioiOgogICJhdG9tLWJlYXV0aWZ5IjoKICAgIGNsajoKICAgICAgYmVhdXRpZnlfb25fc2F2ZTogdHJ1ZQogICAgZ2VuZXJhbDoKICAgICAgX2FuYWx5dGljc1VzZXJJZDogIjJlYTE4Y2UyLTJhOGEtNDEwYi04ZDRhLTgyYmQ3ZDJhNGZlMiIKICAiY29sb3ItcGlja2VyIjoKICAgIHByZWZlcnJlZEZvcm1hdDogIkhFWCIKICBjb3JlOgogICAgY3VzdG9tRmlsZVR5cGVzOgogICAgICAic291cmNlLmluaSI6IFsKICAgICAgICAiLmhncmMiCiAgICAgICAgIi5idWNrY29uZmlnIgogICAgICAgICIuZmxvd2NvbmZpZyIKICAgICAgXQogICAgICAic291cmNlLmpzb24iOiBbCiAgICAgICAgIkJVQ0suYXV0b2RlcHMiCiAgICAgIF0KICAgICAgInNvdXJjZS5weXRob24iOiBbCiAgICAgICAgIkJVQ0siCiAgICAgIF0KICAgIGRpc2FibGVkUGFja2FnZXM6IFsKICAgICAgImltYWdlLXZpZXciCiAgICAgICJ3ZWxjb21lIgogICAgXQogICAgcHJvamVjdEhvbWU6ICIvcmVwb3MiCiAgICB0ZWxlbWV0cnlDb25zZW50OiAibGltaXRlZCIKICBlZGl0b3I6CiAgICBmb250RmFtaWx5OiAiSW5jb25zb2xhdGEsIE1lbmxvLCBDb25zb2xhcywgRGVqYVZ1IFNhbnMgTW9ubywgbW9ub3NwYWNlIgogICAgZm9udFNpemU6IDE3CiAgICBzY3JvbGxQYXN0RW5kOiB0cnVlCiAgImV4Y2VwdGlvbi1yZXBvcnRpbmciOgogICAgdXNlcklkOiAiZjUyZDNiNjEtOTFkNC00ZmQ5LWEwM2YtMGU0MzdlYWFlZmQwIgogICJnaXQtYmxhbWUiOgogICAgY29sdW1uV2lkdGg6IDM5NgogICJsaXNwLXBhcmVkaXQiOiB7fQogICJwYWNrYWdlLXN5bmMiOiB7fQogICJwcm90by1yZXBsIjoKICAgIGF1dG9QcmV0dHlQcmludDogdHJ1ZQogIHN3YWNrZXRzOgogICAgY29sb3JQYXJlbnM6IHRydWUKICAgIGNvbG9yU3F1YXJlQnJhY2tldHM6IHRydWUKICAgIGNvbG9yczogWwogICAgICAiI2JmNjE2YSIKICAgICAgIiNhM2JlOGMiCiAgICAgICIjZWJjYjhiIgogICAgICAiIzgxYTFjMSIKICAgICAgIiNiNDhlYWQiCiAgICAgICIjOGZiY2JiIgogICAgXQogIHRhYnM6CiAgICBhbHdheXNTaG93VGFiQmFyOiBmYWxzZQogICAgZW5hYmxlVmNzQ29sb3Jpbmc6IHRydWUKICAidG9vbC1iYXIiOgogICAgcG9zaXRpb246ICJMZWZ0IgogICJ0cmVlLXZpZXciOgogICAgYXV0b1JldmVhbDogdHJ1ZQogICAgaGlkZUlnbm9yZWROYW1lczogdHJ1ZQogICAgaGlkZVZjc0lnbm9yZWRGaWxlczogdHJ1ZQogICAgc3F1YXNoRGlyZWN0b3J5TmFtZXM6IHRydWUKICAidmltLW1vZGUtcGx1cyI6CiAgICBoaWRlQ29tbWFuZHNGcm9tQ29tbWFuZFBhbGV0dGU6IHRydWUKICB3ZWxjb21lOgogICAgc2hvd09uU3RhcnR1cDogZmFsc2UKICAid2hpY2gta2V5IjoKICAgIGtleXN0cm9rZXNGb3JtYXQ6ICJsb25nIgogICAgc2hvd0JpbmRpbmdzRGVsYXk6IDAuMQo='
G__11799='IyBhbGlhc2VzCgojIGhhbmR5IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIGEgY29tbWFuZAojIGV4aXRzCmV4aXN0cygpIHsKICB0eXBlICQxID4gL2Rldi9udWxsIDI+JjEKfQoKaXNfb3N4KCkgewogIGlmIFtbICIkKHVuYW1lKSIgPT0gIkRhcndpbiIgXV07IHRoZW4KICAgIHJldHVybiAwCiAgZWxzZQogICAgcmV0dXJuIDEKICBmaQp9CgojIHNldHVwIGRpcmVjdG9yeSBqdW1wZXIKZXhpc3RzIGZhc2QgJiYgZXZhbCAiJChmYXNkIC0taW5pdCBhdXRvKSIKCiMgb3BlbiBmaWxlIGFzIGlmIGluIGZpbGUgYnJvd3NlcgpleGlzdHMgeGRnLW9wZW4gJiYgYWxpYXMgb3Blbj0neGRnLW9wZW4nCgojIGxpc3RpbmcKYWxpYXMgbHM9J2xzIC0tY29sb3I9YXV0bycKaXNfb3N4ICYmIGFsaWFzIGxzPSdscyAtRycKYWxpYXMgbGw9J2xzIC1BbEYnCmFsaWFzIGxhPSdscyAtQScKYWxpYXMgbD0nbHMgLUNGJwoKIyB2aW0KYWxpYXMgdmk9J3ZpbS13cmFwJwphbGlhcyB2aW09J3ZpbS13cmFwJwphbGlhcyBzdmk9J3N1ZG8gLUUgdmltLXdyYXAnCmFsaWFzIHZpbXJjPSd2aW0td3JhcCB+Ly52aW1yYycKCiMgZ3JlcAphbGlhcyBncmVwPSdncmVwIC0tY29sb3I9YXV0bycKYWxpYXMgZmdyZXA9J2ZncmVwIC0tY29sb3I9YXV0bycKYWxpYXMgZWdyZXA9J2VncmVwIC0tY29sb3I9YXV0bycKCiMgc3Vkbywga2VlcCBlbnZpcm9ubWVudAphbGlhcyBzPSdzdWRvIC1FJwoKIyBwYWNtYW4gc2hvcnRjdXRzCmFsaWFzIHBhY21hbj0nc3VkbyBwYWNtYW4gLS1jb2xvcj1hdXRvJwphbGlhcyBwYWNpbj0ncGFjbWFuIC1TJyAgICAjIGluc3RhbGwgZnJvbSByZXBvCmFsaWFzIHBhY2lucz0ncGFjbWFuIC1VJyAgICMgaW5zdGFsbCBmcm9tIGZpbGUKYWxpYXMgcGFjcmVtPSdwYWNtYW4gLVJucycgIyByZW1vdmUgcGFja2FnZQphbGlhcyBwYWNyZT0ncGFjbWFuIC1SJyAgICAjIHJlbW92ZSBrZWVwIGNvbmZpZwphbGlhcyBwYWNjbD0ncGFjbWFuIC1TYycgICAjIGNsZWFuIHBhY2thZ2UgY2FjaGUKYWxpYXMgcGFjdXBnPSdwYWNtYW4gLVN5dScgIyB1cGdyYWRlCgojIGdpdCBzaG9ydGN1dHMKYWxpYXMgZ3M9J2dpdCBzdGF0dXMgLXMgLWInCmFsaWFzIGdkPSdnaXQgZGlmZicKYWxpYXMgZ2M9J2dpdCBjaGVja291dCcKYWxpYXMgZ2w9J2dpdCBsb2cgLS1vbmVsaW5lIC0tZGVjb3JhdGUgLS1ncmFwaCcKCiMgdG11eAphbGlhcyB0bXV4PSdURVJNPXNjcmVlbi0yNTZjb2xvci1iY2UgdG11eCcKCiMgYmV0dGVyIGNwLCBpZiBhdmFpbGFibGUKZXhpc3RzIHJzeW5jICYmIGFsaWFzIGNwPSdyc3luYyAtYSAtLXByb2dyZXNzJwoKIyBoYW5keSBzeXN0ZW1kIHNob3J0Y3V0cwphbGlhcyBjdGw9J3N1ZG8gc3lzdGVtY3RsJwphbGlhcyByY3RsPSdzdWRvIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkJwoKIyBkb2NrZXIgYWxpYXNlcwphbGlhcyBkb2NrZXItY2xlYW49J2RvY2tlciBybSAkKGRvY2tlciBwcyAtYXEpJwoKIyBucG0KZXhpc3RzIHB5dGhvbjIgJiYgYWxpYXMgbnBtPSJucG0gLS1weXRob249cHl0aG9uMiIKCmFsaWFzIC4uPSdjZCAuLi8nCgppc19vc3ggfHwgYWxpYXMgcGJjb3B5PSd4c2VsIC0tY2xpcGJvYXJkIC0taW5wdXQnCmlzX29zeCB8fCBhbGlhcyBwYnBhc3RlPSd4c2VsIC0tY2xpcGJvYXJkIC0tb3V0cHV0JwoKYWxpYXMgZG90cz0nZ2l0ICItLWdpdC1kaXI9JEhPTUUvLmRvdHMiICItLXdvcmstdHJlZT0kSE9NRSInCmFsaWFzIHZyZXBsPSdjbG9qdXJlIC1BdnJlcGwnCmFsaWFzIHJlYmVsPSdjbG9qdXJlIC1BOnJlYmVsJwo='
G__11806='IiBBdXRvbWF0cmljIHJlbG9hZGluZyBvZiAudmltcmMKYXV0b2NtZCEgYnVmd3JpdGVwb3N0IC52aW1yYyBzb3VyY2UgJQoKc2V0IG5vY29tcGF0aWJsZSAgICAgICAgICAgICAgIiBiZSBpTXByb3ZlZCwgcmVxdWlyZWQKZmlsZXR5cGUgb2ZmICAgICAgICAgICAgICAgICAgIiByZXF1aXJlZApzZXQgbW9kZWxpbmUKc2V0IG1vZGVsaW5lcz0yCgoiIHNldCB0aGUgcnVudGltZSBwYXRoIHRvIGluY2x1ZGUgVnVuZGxlIGFuZCBpbml0aWFsaXplCnNldCBydHArPX4vLnZpbS9idW5kbGUvVnVuZGxlLnZpbQpjYWxsIHZ1bmRsZSNiZWdpbigpCgoiIGxldCBWdW5kbGUgbWFuYWdlIFZ1bmRsZSwgcmVxdWlyZWQKUGx1Z2luICdWdW5kbGVWaW0vVnVuZGxlLnZpbScKClBsdWdpbiAnc2Nyb29sb29zZS9uZXJkdHJlZScKUGx1Z2luICd0cG9wZS92aW0tZnVnaXRpdmUnClBsdWdpbiAnYWlyYmxhZGUvdmltLWdpdGd1dHRlcicKUGx1Z2luICdqZWxlcmEvdmltLWphdmFzY3JpcHQtc3ludGF4JwpQbHVnaW4gJ3Rwb3BlL3ZpbS1tYXJrZG93bicKUGx1Z2luICd2aW0tYWlybGluZS92aW0tYWlybGluZScKUGx1Z2luICd2aW0tYWlybGluZS92aW0tYWlybGluZS10aGVtZXMnClBsdWdpbiAndHBvcGUvdmltLXN1cnJvdW5kJwpQbHVnaW4gJ2tpZW4vY3RybHAudmltJwpQbHVnaW4gJ0NvbnJhZElyd2luL3ZpbS1icmFja2V0ZWQtcGFzdGUnClBsdWdpbiAnanBhbGFyZHkvdmltLXNsaW1lJwpQbHVnaW4gJ2x1b2NoZW4xOTkwL3JhaW5ib3cnClBsdWdpbiAndmltLXNjcmlwdHMvcGFyZWRpdC52aW0nClBsdWdpbiAndHBvcGUvdmltLWZpcmVwbGFjZScKIlBsdWdpbiAnT2xpY2FsL2Nvbmp1cmUnLCB7ICd0YWcnOiAndjIuMS4wJywgJ2RvJzogJ2Jpbi9jb21waWxlJyB9ClBsdWdpbiAnbGVhZmdhcmxhbmQvdHlwZXNjcmlwdC12aW0nClBsdWdpbiAnUXVyYW15L3RzdXF1eW9taScKUGx1Z2luICdlcnZhbmRldy9zdXBlcnRhYicKUGx1Z2luICdhcmN0aWNpY2VzdHVkaW8vbm9yZC12aW0nClBsdWdpbiAnbWFzdWtvbWkvdmltLW1hcmtkb3duLWZvbGRpbmcnCgoiIEFsbCBvZiB5b3VyIFBsdWdpbnMgbXVzdCBiZSBhZGRlZCBiZWZvcmUgdGhlIGZvbGxvd2luZyBsaW5lCmNhbGwgdnVuZGxlI2VuZCgpICAgICAgICAgICAgIiByZXF1aXJlZApmaWxldHlwZSBwbHVnaW4gaW5kZW50IG9uICAgICIgcmVxdWlyZWQKc2V0IG9tbmlmdW5jPXN5bnRheGNvbXBsZXRlI0NvbXBsZXRlCmxldCBnOlN1cGVyVGFiRGVmYXVsdENvbXBsZXRpb25UeXBlID0gIjxDLVg+PEMtTz4iCgpzZXQgdXBkYXRldGltZT0xMDAKCmxldCBnOnJhaW5ib3dfYWN0aXZlID0gMQpsZXQgZzpyYWluYm93X2NvbmYgPSB7CiAgICAgIFwgJ2N0ZXJtZmdzJzogWydkYXJrcmVkJywgJ2RhcmtibHVlJywgJ2dyYXknLCAnbGlnaHRibHVlJywgJ2RhcmttYWdlbnRhJ10KICAgICAgXCB9CgpmdW5jdGlvbiEgQ2xqZm10KCkKICBub3JtYWwgaXgKICBub3JtYWwgeAogIHVuZG9qb2luCiAgbGV0IHNhdmVfcG9zID0gd2luc2F2ZXZpZXcoKQogICUhY2xqZm10CiAgY2FsbCB3aW5yZXN0dmlldyhzYXZlX3BvcykKZW5kZnVuY3Rpb24KCmNvbW1hbmQhIC1uYXJncz0wIENsamZtdCBjYWxsIENsamZtdCgpCmF1dG9jbWQgQnVmV3JpdGVQcmUgKi5jbGosKi5jbGpzLCouY2xqYywqLmVkbiwgY2FsbCBDbGpmbXQoKQpub3JlbWFwIGZmIDpDbGpmbXQ8Q1I+CgpsZXQgZzpjb25qdXJlX29tbmlmdW5jID0gMApsZXQgZzpjb25qdXJlX2xvZ19kaXJlY3Rpb24gPSAiaG9yaXpvbnRhbCIKbGV0IGc6Y29uanVyZV9sb2dfYmxhY2tsaXN0ID0gWyJ1cCIsICJyZXQiLCAicmV0LW11bHRpbGluZSIsICJsb2FkLWZpbGUiLCAiZXZhbCJdCmxldCBnOmNvbmp1cmVfbm1hcF9ldmFsX2N1cnJlbnRfZm9ybSA9ICJjcHAiCgpsZXQgZzpzbGltZV90YXJnZXQgPSAidG11eCIKCmxldCBnOmN0cmxwX3VzZXJfY29tbWFuZCA9CiAgXCBbJy5naXQnLCAnY2QgJXMgJiYgZ2l0IGxzLWZpbGVzIC1jbyAtLWV4Y2x1ZGUtc3RhbmRhcmQnXQpsZXQgZzpjdHJscF9jbWQ9J0N0cmxQIDpwd2QnCmxldCBnOmN0cmxwX21heF9maWxlcz0wCmxldCBnOmN0cmxwX21heF9kZXB0aD00MAoKIiBtYXJrZG93biBmb2xkaW5nCmlmIGhhcygiYXV0b2NtZCIpCiAgZmlsZXR5cGUgcGx1Z2luIGluZGVudCBvbgplbmRpZgphdXRvY21kIEZpbGVUeXBlIG1hcmtkb3duIHNldCBmb2xkZXhwcj1OZXN0ZWRNYXJrZG93bkZvbGRzKCkKCiIgc25pcHBldHMKbGV0IGc6VWx0aVNuaXBzRXhwYW5kVHJpZ2dlcj0iPHRhYj4iCmxldCBnOlVsdGlTbmlwc0p1bXBGb3J3YXJkVHJpZ2dlcj0iPHRhYj4iCmxldCBnOlVsdGlTbmlwc0p1bXBCYWNrd2FyZFRyaWdnZXI9IjxzLXRhYj4iCgpsZXQgZzpVbHRpU25pcHNFZGl0U3BsaXQ9InZlcnRpY2FsIgoKIiBhbHdheXMgc2hvdyB0aGF0IHN0YXR1cyBsaW5lCnNldCBsYXN0c3RhdHVzPTIKCiIgZmFzdGVyIHJlZHJhd2luZwpzZXQgdHR5ZmFzdAoKIiBTZXQgdGhlIGJvb2xlYW4gbnVtYmVyIG9wdGlvbiB0byB0cnVlIHNldCBudW1iZXIgc2V0IG51bWJlcgpzZXQgbnVtYmVyCgoiIEhpZ2hsaWdodCBjdXJyZW50IGxpbmUKc2V0IGN1cnNvcmxpbmUKCiIgU2V0IHRoZSB0ZXh0IHdpZHRoIG9wdGlvbiB0byAnNzQnCnNldCB0dz03NCB3cmFwIGxpbmVicmVhawoKIiBTZXQgdGhlIHRhYiBvcHRpb25zCnNldCBzbWFydHRhYgpzZXQgYXV0b2luZGVudApzZXQgdGFic3RvcD0yCnNldCBzaGlmdHdpZHRoPTIKc2V0IGV4cGFuZHRhYgpzZXQgdmlzdWFsYmVsbAoKIiBub3JtYWwgdGFicyBmb3IgTWFrZWZpbGUgYW5kIGdvCmF1dG9jbWQgRmlsZVR5cGUgbWFrZSBzZXRsb2NhbCBub2V4cGFuZHRhYgphdXRvY21kIEZpbGVUeXBlIGdvIHNldGxvY2FsIG5vZXhwYW5kdGFiCgoiIFNldCBpbmNyZW1lbnRhbCBzZWFyY2gKc2V0IGluY3NlYXJjaApzZXQgaWdub3JlY2FzZQpzZXQgc21hcnRjYXNlCiIgSGlnaGxpZ2h0aW5nCnNldCBobHNlYXJjaAoKIiB3aWxkbW9kZQpzZXQgd2lsZG1vZGU9bG9uZ2VzdCxsaXN0CgoiIEZvbGRpbmcgc2V0dGluZ3MKc2V0IGZvbGRtZXRob2Q9bWFya2VyCnNldCBmb2xkbmVzdG1heD0xMApzZXQgbm9mb2xkZW5hYmxlCnNldCBmb2xkbGV2ZWw9MAoKIiBTcGVsbGluZwpzZXQgc3BlbGxsYW5nPWVuX3VzCgoiIERpc2FibGUgc3dhcCBmaWxlcwpzZXQgbm9zd2FwZmlsZQpzZXQgbm93cml0ZWJhY2t1cAoiIERpc2FibGUgYmFja3VwIGNvcHkKc2V0IGJhY2t1cGNvcHk9eWVzCgoiIENvbG9ycwpzZXQgdF9Dbz0yNTYKc3ludGF4IGVuYWJsZQp0cnkKICBjb2xvcnNjaGVtZSBub3JkCiAgc2V0IGJhY2tncm91bmQ9ZGFyawpjYXRjaCAvXlZpbVwlKChcYVwrKVwpXD06RTE4NS8KICAiIG9oaCB3ZWxsCmVuZHRyeQoKIiBlbmFibGUgbW91c2Ugc2Nyb2xsaW5nCnNldCBtb3VzZT1hCgoiIGZpeCBjb3B5IHBhc3RlIGluIHZpbSBmb3IgdG11eApzZXQgY2xpcGJvYXJkPXVubmFtZWQKCiIgRGlzYWJsZSBleC1tb2RlCm1hcCBRIDxOb3A+CgoiIEl0IGh1cnRzIHRvIGhpdCBcIGFsbCBvZiB0aGUgdGltZSA6LSgKbGV0IG1hcGxlYWRlcj0nLCcKCiIgUXVpY2sgc2F2ZSBjb21tYW5kCm5vcmVtYXAgIDxsZWFkZXI+cyA6dXBkYXRlPENSPgoidm5vcmVtYXAgPGxlYWRlcj5zIDp1cGRhdGU8Q1I+CiJpbm9yZW1hcCA8bGVhZGVyPnMgOnVwZGF0ZTxDUj4KCiIgQ3JlYXRpbmcgbmV3IHRhYnMKbWFwIDxsZWFkZXI+biA8RXNjPjp0YWJuZXc8Q1I+Cm1hcCBnbiA8RXNjPjp0YWJuZXc8Q1I+Cm1hcCBnbCA8RXNjPjp0YWJuZXh0PENSPgptYXAgZ2ggPEVzYz46dGFicHJldjxDUj4KCiIgUXVpdApub3JlbWFwIDxsZWFkZXI+cSA6cXVpdDxDUj4Kbm9yZW1hcCA8bGVhZGVyPlEgOnF1aXRhbGw8Q1I+CgoiIEhpZ2hsaWdodCBzZWFyY2hpbmcKbm9yZW1hcCA8bGVhZGVyPmMgOnNldCBub2hsc2VhcmNoPENSPgpub3JlbWFwIDxsZWFkZXI+QyA6c2V0IGhsc2VhcmNoPENSPgoKIiBFeGl0IGluc2VydCBtb2RlCmlub3JlbWFwIGtqIDxFc2M+Cmlub3JlbWFwIGtKIDxFc2M+Cmlub3JlbWFwIEtqIDxFc2M+Cmlub3JlbWFwIEtKIDxFc2M+CgoiIFNvcnQgZnVuY3Rpb24Kdm5vcmVtYXAgPGxlYWRlcj5yIDpzb3J0PENSPgoKIiBCbG9jayBpbmRlbnRpbmcKdm5vcmVtYXAgPiA+Z3YKdm5vcmVtYXAgPCA8Z3YKCiIgRGlzYWJsZSBhcnJvdyBrZXlzIHRvIGJlIG1lYW4KaW5vcmVtYXAgPExlZnQ+ICAgICA8Tk9QPgppbm9yZW1hcCA8UmlnaHQ+ICAgIDxOT1A+Cmlub3JlbWFwIDxVcD4gICAgICAgPE5PUD4KaW5vcmVtYXAgPERvd24+ICAgICA8Tk9QPgoKIiBRdWlja2x5IHdyYXAgYSBsb25nIGxpbmUKbm5vcmVtYXAgPGxlYWRlcj53IG1rVmdxYGsKIiBXcmFwIGFuIGVudGlyZSBmaWxlCm5vcmVtYXAgPGxlYWRlcj5XIGdnMjAwXHd9agoiIFF1aWNrbHkgdW53cmFwIGEgcGFyYWdyYXBoCm5vcmVtYXAgPGxlYWRlcj51IG1re2pWfWtKYGsKCiIgUmVtb3ZlIGFubm95aW5nIHdoaXRlc3BhY2UgZm9yIGxpbmUKbm9yZW1hcCA8bGVhZGVyPmUgOnMvXFxzKiQvLzxDUj4KIiBSZW1vdmUgYW5ub3lpbmcgd2hpdGVzcGFjZSBmb3IgZmlsZQpub3JlbWFwIDxsZWFkZXI+RSA6JXMvXHMqJC8vPENSPgoKIiBNb3ZpbmcgYXJvdW5kIHNwbGl0cwptYXAgPGMtaj4gPGMtdz5qCm1hcCA8Yy1rPiA8Yy13PmsKbWFwIDxjLWw+IDxjLXc+bAptYXAgPGMtaD4gPGMtdz5oCgoiIE1hZ25pZnkgdGhlIGN1cnJlbnQgc3BsaXQKbm9yZW1hcCA8bGVhZGVyPm0gPEMtdz5fCiIgUmVzdG9yZSBzcGxpdCB3aW5kb3dzCm5vcmVtYXAgPGxlYWRlcj5yIDxDLXc+PQoKIiBJIGNhbiBmaW5hbGx5IHBhc3RlIGFnYWluLgpubm9yZW1hcCA8RjI+IDpzZXQgaW52cGFzdGUgcGFzdGU/PENSPgpzZXQgc2hvd21vZGUKCiIgVG9nZ2xlIHNwZWxsaW5nCmltYXAgPExlYWRlcj5zIDxDLW8+OnNldGxvY2FsIHNwZWxsITxDUj4Kbm1hcCA8TGVhZGVyPnMgOnNldGxvY2FsIHNwZWxsITxDUj4KCiIgT3BlbiBORVJEVHJlZSBmaWxlIG5hdmlnYXRvcgpub3JlbWFwIDxsZWFkZXI+dCA6TkVSRFRyZWU8Q1I+CgoiIFNob3J0Y3V0IHRvIHJhcGlkbHkgdG9nZ2xlIGBzZXQgbGlzdGAKbm1hcCA8bGVhZGVyPmwgOnNldCBsaXN0ITxDUj4KCiIgT3BlbiB0aGUgLnZpbXJjIGZpbGUKY29tbWFuZCEgViA6ZSB+Ly52aW1yYwpub3JlbWFwIDxsZWFkZXI+diA6dGFibmV3IH4vLnZpbXJjIDxDUj4K'
G__11812='IyBZb3VyIGtleW1hcAojCiMgQXRvbSBrZXltYXBzIHdvcmsgc2ltaWxhcmx5IHRvIHN0eWxlIHNoZWV0cy4gSnVzdCBhcyBzdHlsZSBzaGVldHMgdXNlCiMgc2VsZWN0b3JzIHRvIGFwcGx5IHN0eWxlcyB0byBlbGVtZW50cywgQXRvbSBrZXltYXBzIHVzZSBzZWxlY3RvcnMgdG8gYXNzb2NpYXRlCiMga2V5c3Ryb2tlcyB3aXRoIGV2ZW50cyBpbiBzcGVjaWZpYyBjb250ZXh0cy4gVW5saWtlIHN0eWxlIHNoZWV0cyBob3dldmVyLAojIGVhY2ggc2VsZWN0b3IgY2FuIG9ubHkgYmUgZGVjbGFyZWQgb25jZS4KIwojIFlvdSBjYW4gY3JlYXRlIGEgbmV3IGtleWJpbmRpbmcgaW4gdGhpcyBmaWxlIGJ5IHR5cGluZyAia2V5IiBhbmQgdGhlbiBoaXR0aW5nCiMgdGFiLgojCiMgSGVyZSdzIGFuIGV4YW1wbGUgdGFrZW4gZnJvbSBBdG9tJ3MgYnVpbHQtaW4ga2V5bWFwOgojCiMgJ2F0b20tdGV4dC1lZGl0b3InOgojICAgJ2VudGVyJzogJ2VkaXRvcjpuZXdsaW5lJwojCiMgJ2F0b20td29ya3NwYWNlJzoKIyAgICdjdHJsLXNoaWZ0LXAnOiAnY29yZTptb3ZlLXVwJwojICAgJ2N0cmwtcCc6ICdjb3JlOm1vdmUtZG93bicKIwojIFlvdSBjYW4gZmluZCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGtleW1hcHMgaW4gdGhlc2UgZ3VpZGVzOgojICogaHR0cDovL2ZsaWdodC1tYW51YWwuYXRvbS5pby91c2luZy1hdG9tL3NlY3Rpb25zL2Jhc2ljLWN1c3RvbWl6YXRpb24vI2N1c3RvbWl6aW5nLWtleWJpbmRpbmdzCiMgKiBodHRwOi8vZmxpZ2h0LW1hbnVhbC5hdG9tLmlvL2JlaGluZC1hdG9tL3NlY3Rpb25zL2tleW1hcHMtaW4tZGVwdGgvCiMKIyBJZiB5b3UncmUgaGF2aW5nIHRyb3VibGUgd2l0aCB5b3VyIGtleWJpbmRpbmdzIG5vdCB3b3JraW5nLCB0cnkgdGhlCiMgS2V5YmluZGluZyBSZXNvbHZlcjogYENtZCsuYCBvbiBtYWNPUyBhbmQgYEN0cmwrLmAgb24gb3RoZXIgcGxhdGZvcm1zLiBTZWUgdGhlCiMgRGVidWdnaW5nIEd1aWRlIGZvciBtb3JlIGluZm9ybWF0aW9uOgojICogaHR0cDovL2ZsaWdodC1tYW51YWwuYXRvbS5pby9oYWNraW5nLWF0b20vc2VjdGlvbnMvZGVidWdnaW5nLyNjaGVjay10aGUta2V5YmluZGluZ3MKIwojIFRoaXMgZmlsZSB1c2VzIENvZmZlZVNjcmlwdCBPYmplY3QgTm90YXRpb24gKENTT04pLgojIElmIHlvdSBhcmUgdW5mYW1pbGlhciB3aXRoIENTT04sIHlvdSBjYW4gcmVhZCBtb3JlIGFib3V0IGl0IGluIHRoZQojIEF0b20gRmxpZ2h0IE1hbnVhbDoKIyBodHRwOi8vZmxpZ2h0LW1hbnVhbC5hdG9tLmlvL3VzaW5nLWF0b20vc2VjdGlvbnMvYmFzaWMtY3VzdG9taXphdGlvbi8jY29uZmlndXJpbmctd2l0aC1jc29uCgonYXRvbS10ZXh0LWVkaXRvcic6CiAgJ2MgcCBwJzogJ3Byb3RvLXJlcGw6ZXhlY3V0ZS1ibG9jaycKICAKJ2F0b20tdGV4dC1lZGl0b3IudmltLW1vZGUtcGx1czpub3QoLmluc2VydC1tb2RlKSc6CiAgJywgcSc6ICdjb3JlOmNsb3NlJwoKJ2F0b20tdGV4dC1lZGl0b3JbZGF0YS1ncmFtbWFyfj0iY2xvanVyZSJdLnZpbS1tb2RlLXBsdXMubm9ybWFsLW1vZGUnOgogICdjdHJsLWwnOiAncHJvdG8tcmVwbDpjbGVhci1yZXBsJwoKJ2F0b20td29ya3NwYWNlIGluay1jb25zb2xlIGF0b20tdGV4dC1lZGl0b3InOgogICdjdHJsLWwnOiAncHJvdG8tcmVwbDpjbGVhci1yZXBsJwoKJ2F0b20tdGV4dC1lZGl0b3JbZGF0YS1ncmFtbWFyfj0iY2xvanVyZSJdLCBhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcn49Imxpc3AiXSwgYXRvbS10ZXh0LWVkaXRvcltkYXRhLWdyYW1tYXJ+PSJuZXdsaXNwIl0sIGF0b20tdGV4dC1lZGl0b3JbZGF0YS1ncmFtbWFyfj0icmFja2V0Il0sIGF0b20tdGV4dC1lZGl0b3JbZGF0YS1ncmFtbWFyfj0ic2NoZW1lIl0nOgogICcsIFcnOiAnbGlzcC1wYXJlZGl0OndyYXAtYXJvdW5kLXBhcmVucycKICAnLCBTJzogJ2xpc3AtcGFyZWRpdDpzcGxpY2UnCiAgJywgKCc6ICdsaXNwLXBhcmVkaXQ6d3JhcC1hcm91bmQtcGFyZW5zJwogICcsIHsnOiAnbGlzcC1wYXJlZGl0OndyYXAtYXJvdW5kLWN1cmx5JwogICcsIFsnOiAnbGlzcC1wYXJlZGl0OndyYXAtYXJvdW5kLXNxdWFyZScKICAnLCA+JzogJ2xpc3AtcGFyZWRpdDpzbHVycC1mb3J3YXJkcycKICAnLCA8JzogJ2xpc3AtcGFyZWRpdDpiYXJmLWZvcndhcmRzJwoKJ2F0b20tdGV4dC1lZGl0b3IudmltLW1vZGUtcGx1czpub3QoLm5vcm1hbC1tb2RlKSc6CiAgJ2sgaic6ICd2aW0tbW9kZS1wbHVzOmFjdGl2YXRlLW5vcm1hbC1tb2RlJwo='
G__11805='c2V0IGd1aWZvbnQ9SW5jb25zb2xhdGE6aDE4CnNldCBndWlvcHRpb25zPQpzZXQgdHJhbnNwYXJlbmN5PTE1CnNldCBibHVycmFkaXVzPTE1Cg=='
G__11810='OzsgVGhlIGRlcHMuZWRuIGZpbGUgZGVzY3JpYmVzIHRoZSBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gYnVpbGQgYSBjbGFzc3BhdGguCjs7Cjs7IFdoZW4gdXNpbmcgdGhlIGBjbG9qdXJlYCBvciBgY2xqYCBzY3JpcHQsIHRoZXJlIGFyZSBzZXZlcmFsIGRlcHMuZWRuIGZpbGVzCjs7IHRoYXQgYXJlIGNvbWJpbmVkOgo7OyAtIGluc3RhbGwtbGV2ZWwKOzsgLSB1c2VyIGxldmVsICh0aGlzIGZpbGUpCjs7IC0gcHJvamVjdCBsZXZlbCAoY3VycmVudCBkaXJlY3Rvcnkgd2hlbiBpbnZva2VkKQo7Owo7OyBGb3IgYWxsIGF0dHJpYnV0ZXMgb3RoZXIgdGhhbiA6cGF0aHMsIHRoZXNlIGNvbmZpZyBmaWxlcyBhcmUgbWVyZ2VkIGxlZnQgdG8gcmlnaHQuCjs7IE9ubHkgdGhlIGxhc3QgOnBhdGhzIGlzIGtlcHQgYW5kIG90aGVycyBhcmUgZHJvcHBlZC4KCns6YWxpYXNlcwogezpyZWJsCiAgezpleHRyYS1kZXBzIHtvcmcuY2xvanVyZS9jb3JlLmFzeW5jIHs6bXZuL3ZlcnNpb24gIjAuNC40OTAifQogICAgICAgICAgICAgICAgOzsgZGVwcyBmb3IgZmlsZSBkYXRhZmljYXRpb24gKDAuOS4xNDkgb3IgbGF0ZXIpCiAgICAgICAgICAgICAgICBvcmcuY2xvanVyZS9kYXRhLmNzdiB7Om12bi92ZXJzaW9uICIwLjEuNCJ9CiAgICAgICAgICAgICAgICBvcmcuY2xvanVyZS9kYXRhLmpzb24gezptdm4vdmVyc2lvbiAiMC4yLjMifQogICAgICAgICAgICAgICAgb3JnLnlhbWwvc25ha2V5YW1sIHs6bXZuL3ZlcnNpb24gIjEuMjMifQogICAgICAgICAgICAgICAgY29tLmNvZ25pdGVjdC9yZWJsCiAgICAgICAgICAgICAgICA7OyBhZGp1c3QgdG8gbWF0Y2ggeW91ciBpbnN0YWxsIGxvY2F0aW9uCiAgICAgICAgICAgICAgICB7OmxvY2FsL3Jvb3QgIi9ob21lL2NocmlzL3JlcG9zL1JFQkwtMC45LjIyMC9SRUJMLTAuOS4yMjAuamFyIn19CiAgIDptYWluLW9wdHMgWyItbSIgImNvZ25pdGVjdC5yZWJsIl19CiAgOnJlYmwtMTEKICB7OmV4dHJhLWRlcHMge29yZy5jbG9qdXJlL2NvcmUuYXN5bmMgezptdm4vdmVyc2lvbiAiMC40LjQ5MCJ9CiAgICAgICAgICAgICAgICA7OyBkZXBzIGZvciBmaWxlIGRhdGFmaWNhdGlvbiAoMC45LjE0OSBvciBsYXRlcikKICAgICAgICAgICAgICAgIG9yZy5jbG9qdXJlL2RhdGEuY3N2IHs6bXZuL3ZlcnNpb24gIjAuMS40In0KICAgICAgICAgICAgICAgIG9yZy5jbG9qdXJlL2RhdGEuanNvbiB7Om12bi92ZXJzaW9uICIwLjIuMyJ9CiAgICAgICAgICAgICAgICBvcmcueWFtbC9zbmFrZXlhbWwgezptdm4vdmVyc2lvbiAiMS4yMyJ9CiAgICAgICAgICAgICAgICBjb20uY29nbml0ZWN0L3JlYmwKICAgICAgICAgICAgICAgIDs7IGFkanVzdCB0byBtYXRjaCB5b3VyIGluc3RhbGwgbG9jYXRpb24KICAgICAgICAgICAgICAgIHs6bG9jYWwvcm9vdCAiL2hvbWUvY2hyaXMvcmVwb3MvUkVCTC0wLjkuMjIwL1JFQkwtMC45LjIyMC5qYXIifQogICAgICAgICAgICAgICAgb3JnLm9wZW5qZngvamF2YWZ4LWZ4bWwgICAgIHs6bXZuL3ZlcnNpb24gIjExLjAuMSJ9CiAgICAgICAgICAgICAgICBvcmcub3BlbmpmeC9qYXZhZngtY29udHJvbHMgezptdm4vdmVyc2lvbiAiMTEuMC4xIn0KICAgICAgICAgICAgICAgIG9yZy5vcGVuamZ4L2phdmFmeC1ncmFwaGljcyB7Om12bi92ZXJzaW9uICIxMS4wLjEifQogICAgICAgICAgICAgICAgb3JnLm9wZW5qZngvamF2YWZ4LW1lZGlhICAgIHs6bXZuL3ZlcnNpb24gIjExLjAuMSJ9CiAgICAgICAgICAgICAgICBvcmcub3BlbmpmeC9qYXZhZngtc3dpbmcgICAgezptdm4vdmVyc2lvbiAiMTEuMC4xIn0KICAgICAgICAgICAgICAgIG9yZy5vcGVuamZ4L2phdmFmeC1iYXNlICAgICB7Om12bi92ZXJzaW9uICIxMS4wLjEifQogICAgICAgICAgICAgICAgb3JnLm9wZW5qZngvamF2YWZ4LXdlYiAgICAgIHs6bXZuL3ZlcnNpb24gIjExLjAuMSJ9fQogICA6bWFpbi1vcHRzIFsiLW0iICJjb2duaXRlY3QucmVibCJdfQogIDpkYXRhaGlrZQogIHs6ZXh0cmEtZGVwcyB7aW8ucmVwbGlrYXRpdi9kYXRhaGlrZSB7Om12bi92ZXJzaW9uICIwLjIuMCJ9fX0KICA6dnJlcGwgezptYWluLW9wdHMgWyItbSB2cmVwbC5jb3JlIl0KICAgICAgICAgIDpleHRyYS1kZXBzCiAgICAgICAgICB7dnJlcGwgezpnaXQvdXJsICJodHRwczovL2dpdGh1Yi5jb20vZGpibHVlL3ZyZXBsLmdpdCIKICAgICAgICAgICAgICAgICAgOnNoYSAiYTBhYTMzYzA2NDNmZGVkMzA5MWNlMzM1OGY2NDIxN2NkY2ZhMWYxNSJ9fX0KICA6cmViZWwgezpleHRyYS1kZXBzIHtjb20uYmhhdW1hbi9yZWJlbC1yZWFkbGluZSB7Om12bi92ZXJzaW9uICIwLjEuNCJ9fQogICAgICAgICAgOm1haW4tb3B0cyBbIi1tIiAicmViZWwtcmVhZGxpbmUubWFpbiJdfQogIDpwcmVwbAogIHs6anZtLW9wdHMgWyItRGNsb2p1cmUuc2VydmVyLnJlcGw9ezpwb3J0LDQwNDA0LDphY2NlcHQsY2xvanVyZS5jb3JlLnNlcnZlci9pby1wcmVwbH0iXX19fQo='
G__11803='IyBhdXRvY29tcGxldGlvbiBzZXR0aW5nCmF1dG9sb2FkIC1VeiBjb21waW5pdApjb21waW5pdAp6c3R5bGUgOmNvbXBpbnN0YWxsIGZpbGVuYW1lICcvaG9tZS9jaHJpcy8uenNocmMnCnpzdHlsZSAnOmNvbXBsZXRpb246KicgbWVudSBzZWxlY3QKCiMgcHJvbXB0IHNldHRpbmdzCmF1dG9sb2FkIC1VIHByb21wdGluaXQKcHJvbXB0aW5pdAphdXRvbG9hZCAtVSBjb2xvcnMgJiYgY29sb3JzCgojIGNvbG9ycyAoc3VwcG9ydHMgb2xkZXIgdmVyc2lvbnMgb2YgenNoKQpyZXQ9IiV7JGZnW3JlZF0lfSIKdXNlcj0iJXskZmdbYmx1ZV0lfSIKaG9zdD0iJXskZmdbeWVsbG93XSV9IgpkaXI9IiV7JGZnW2dyZWVuXSV9IgpyZXBvPSIleyRmZ1tyZWRdJX0iCgojIHJlc2V0IGNvbG9yCnJzPSIleyRyZXNldF9jb2xvciV9IgoKZnVuY3Rpb24gY3VycmVudF9icmFuY2ggewogICAgW1sgJChnaXQgZGlmZiAtLXNob3J0c3RhdCAyPiAvZGV2L251bGwgfCB0YWlsIC1uMSkgIT0gIiIgXV0gJiYgZWNobyAtbiAiKiIKICAgIGVjaG8gJChnaXQgcmV2LXBhcnNlIC0tYWJicmV2LXJlZiBIRUFEIDI+IC9kZXYvbnVsbCkKfQoKZnVuY3Rpb24gcHJlY21kIHsKCmJyYW5jaD0iJChjdXJyZW50X2JyYW5jaCkiCmlmIFsgIiRicmFuY2giICE9ICIiIF07IHRoZW4KICAgIGJyYW5jaD0ib24gJHtyZXBvfSRicmFuY2gke3JzfSIKZmkKClBST01QVD0iJHtyZXR9JSg/Li4lPyApJHtyc30ke3VzZXJ9JW4ke3JzfSBhdCAke2hvc3R9JW0ke3JzfSBpbiAke2Rpcn0lfiR7cnN9ICR7YnJhbmNofQolIyAiCgp9CgojIGhpc3Rvcnkgc2V0dGluZ3MKSElTVEZJTEU9fi8uaGlzdGZpbGUKSElTVFNJWkU9NTAwMApTQVZFSElTVD0xMDAwMAoKc291cmNlIH4vLnByb2ZpbGUKZXZhbCAiJFJVTiIK'
G__11808='OzsgQWRkZWQgYnkgUGFja2FnZS5lbC4gIFRoaXMgbXVzdCBjb21lIGJlZm9yZSBjb25maWd1cmF0aW9ucyBvZgo7OyBpbnN0YWxsZWQgcGFja2FnZXMuICBEb24ndCBkZWxldGUgdGhpcyBsaW5lLiAgSWYgeW91IGRvbid0IHdhbnQgaXQsCjs7IGp1c3QgY29tbWVudCBpdCBvdXQgYnkgYWRkaW5nIGEgc2VtaWNvbG9uIHRvIHRoZSBzdGFydCBvZiB0aGUgbGluZS4KOzsgWW91IG1heSBkZWxldGUgdGhlc2UgZXhwbGFuYXRvcnkgY29tbWVudHMuCihwYWNrYWdlLWluaXRpYWxpemUpCgoocmVxdWlyZSAnb3JnKQoob3JnLWJhYmVsLWxvYWQtZmlsZSAoZXhwYW5kLWZpbGUtbmFtZSAifi8uZW1hY3MuZC9zZXR0aW5ncy5vcmciKSkKCg=='
G__11814='LyoKICogWW91ciBTdHlsZXNoZWV0CiAqCiAqIFRoaXMgc3R5bGVzaGVldCBpcyBsb2FkZWQgd2hlbiBBdG9tIHN0YXJ0cyB1cCBhbmQgaXMgcmVsb2FkZWQgYXV0b21hdGljYWxseQogKiB3aGVuIGl0IGlzIGNoYW5nZWQgYW5kIHNhdmVkLgogKgogKiBBZGQgeW91ciBvd24gQ1NTIG9yIExlc3MgdG8gZnVsbHkgY3VzdG9taXplIEF0b20uCiAqIElmIHlvdSBhcmUgdW5mYW1pbGlhciB3aXRoIExlc3MsIHlvdSBjYW4gcmVhZCBtb3JlIGFib3V0IGl0IGhlcmU6CiAqIGh0dHA6Ly9sZXNzY3NzLm9yZwogKi8KCgovKgogKiBleGFtcGxlcwogKiAoVG8gc2VlIHRoZW0sIHVuY29tbWVudCBhbmQgc2F2ZSkKICovCgovLyBzdHlsZSB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgdHJlZSB2aWV3Ci50cmVlLXZpZXcgewogIC8vIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7Cn0KCi8vIHN0eWxlIHRoZSBiYWNrZ3JvdW5kIGFuZCBmb3JlZ3JvdW5kIGNvbG9ycyBvbiB0aGUgYXRvbS10ZXh0LWVkaXRvci1lbGVtZW50IGl0c2VsZgphdG9tLXRleHQtZWRpdG9yIHsKICAvLyBjb2xvcjogd2hpdGU7CiAgLy8gYmFja2dyb3VuZC1jb2xvcjogaHNsKDE4MCwgMjQlLCAxMiUpOwp9CgovLyBzdHlsZSBVSSBlbGVtZW50cyBpbnNpZGUgYXRvbS10ZXh0LWVkaXRvcgphdG9tLXRleHQtZWRpdG9yIC5jdXJzb3IgewogIC8vIGJvcmRlci1jb2xvcjogcmVkOwp9CgphdG9tLXRleHQtZWRpdG9yW21pbmldLmlzLWZvY3VzZWQgewogIGJveC1zaGFkb3c6IG5vbmU7Cn0K'
G__11809='KiBwYWNrYWdlcwoKKiogbWVscGEKCiMrQkVHSU5fU1JDIGVtYWNzLWxpc3AKKGFkZC10by1saXN0ICdwYWNrYWdlLWFyY2hpdmVzCiAgICAgICAgICAgICAnKCJtZWxwYSIgLiAiaHR0cHM6Ly9zdGFibGUubWVscGEub3JnL3BhY2thZ2VzLyIpKQoodW5sZXNzIChwYWNrYWdlLWluc3RhbGxlZC1wICd1c2UtcGFja2FnZSkKICAocGFja2FnZS1yZWZyZXNoLWNvbnRlbnRzKQogIChwYWNrYWdlLWluc3RhbGwgJ3VzZS1wYWNrYWdlKSkKKHJlcXVpcmUgJ3VzZS1wYWNrYWdlKQooc2V0cSB1c2UtcGFja2FnZS1hbHdheXMtZW5zdXJlIHQpCihwYWNrYWdlLWluaXRpYWxpemUpCiMrRU5EX1NSQwoKKiB2YXJpYWJsZXMgZm9yIG1vZGVzCgojK0JFR0lOX1NSQyBlbWFjcy1saXNwCihtZW51LWJhci1tb2RlIC0xKQoodG9vbC1iYXItbW9kZSAtMSkKKHNjcm9sbC1iYXItbW9kZSAtMSkKKHNldHEgdmlzaWJsZS1iZWxsIG5pbCkKKHNldHEgaW5oaWJpdC1zcGxhc2gtc2NyZWVuIHQpCihzZXRxIG1ha2UtYmFja3VwLWZpbGVzIG5pbCkKKGdsb2JhbC1saW51bS1tb2RlIDEpCihnbG9iYWwtaGwtbGluZS1tb2RlIDEpCiMrRU5EX1NSQwoKKiBmb250cwoKIytCRUdJTl9TUkMgZW1hY3MtbGlzcAooc2V0LWRlZmF1bHQtZm9udCAiSW5jb25zb2xhdGEgMTYiKQojK0VORF9TUkMKCiogZXZpbCBtb2RlCgojK0JFR0lOX1NSQyBlbWFjcy1saXNwCih1c2UtcGFja2FnZSBldmlsCiAgOmluaXQKICAoYWRkLXRvLWxpc3QgJ2xvYWQtcGF0aCAifi8uZW1hY3MuZC9ldmlsIikKICA6Y29uZmlnCiAgKGV2aWwtbW9kZSAxKSkKIytFTkRfU1JDCgoqIHRoZW1lCgojK0JFR0lOX1NSQyBlbWFjcy1saXNwCih1c2UtcGFja2FnZSBub3JkLXRoZW1lCiAgOmluaXQKICAoYWRkLXRvLWxpc3QgJ2N1c3RvbS10aGVtZS1sb2FkLXBhdGggKGV4cGFuZC1maWxlLW5hbWUgIn4vLmVtYWNzLmQvdGhlbWVzLyIpKQogIDpjb25maWcKICAobG9hZC10aGVtZSAnbm9yZCB0KSkKIytFTkRfU1JDCgoqIHBvd2VybGluZQoKIytCRUdJTl9TUkMgZW1hY3MtbGlzcAoodXNlLXBhY2thZ2UgcG93ZXJsaW5lKQoKKHVzZS1wYWNrYWdlIGFpcmxpbmUtdGhlbWVzCiAgOmluaXQKICAocHJvZ24KICAgIChyZXF1aXJlICdhaXJsaW5lLXRoZW1lcykKICAgIChsb2FkLXRoZW1lICdhaXJsaW5lLWRvb20tb25lIHQpKQogIDpjb25maWcKICAocHJvZ24KICAgIChzZXRxIHBvd2VybGluZS11dGYtOC1zZXBhcmF0b3ItbGVmdCAgICAgICAgI3hlMGIwCiAgICAgICAgICBwb3dlcmxpbmUtdXRmLTgtc2VwYXJhdG9yLXJpZ2h0ICAgICAgICN4ZTBiMgogICAgICAgICAgYWlybGluZS11dGYtZ2x5cGgtc2VwYXJhdG9yLWxlZnQgICAgICAjeGUwYjAKICAgICAgICAgIGFpcmxpbmUtdXRmLWdseXBoLXNlcGFyYXRvci1yaWdodCAgICAgI3hlMGIyCiAgICAgICAgICBhaXJsaW5lLXV0Zi1nbHlwaC1zdWJzZXBhcmF0b3ItbGVmdCAgICN4ZTBiMQogICAgICAgICAgYWlybGluZS11dGYtZ2x5cGgtc3Vic2VwYXJhdG9yLXJpZ2h0ICAjeGUwYjMKICAgICAgICAgIGFpcmxpbmUtdXRmLWdseXBoLWJyYW5jaCAgICAgICAgICAgICAgI3hlMGEwCiAgICAgICAgICBhaXJsaW5lLXV0Zi1nbHlwaC1yZWFkb25seSAgICAgICAgICAgICN4ZTBhMgogICAgICAgICAgYWlybGluZS11dGYtZ2x5cGgtbGluZW51bWJlciAgICAgICAgICAjeGUwYTEpKSkKIytFTkRfU1JDCgoqIGNsb2p1cmUKCiMrQkVHSU5fU1JDIGVtYWNzLWxpc3AKKHVzZS1wYWNrYWdlIHBhcmVkaXQpCih1c2UtcGFja2FnZSByYWluYm93LWRlbGltaXRlcnMKICA6aW5pdCAoYWRkLWhvb2sgJ3Byb2ctbW9kZS1ob29rICMncmFpbmJvdy1kZWxpbWl0ZXJzLW1vZGUpKQoodXNlLXBhY2thZ2UgY2xvanVyZS1tb2RlKQoodXNlLXBhY2thZ2UgY2lkZXIpCiMrRU5EX1NSQwo='
G__11813='cGFja2FnZXM6IFsKICAiYXRvbS1iZWF1dGlmeSIKICAiYXRvbS1icm93c2VyIgogICJhdG9tLWhpZGUtdGFicyIKICAiYnVmZmVyLWxpc3QiCiAgImNvbG9yLXBpY2tlciIKICAiZXgtbW9kZSIKICAiZmlsZS1pY29ucyIKICAiZ2l0LWJsYW1lIgogICJnaXQtcGx1cyIKICAiaW5rIgogICJsYW5ndWFnZS1zY2hlbWUiCiAgImxpc3AtcGFyZWRpdCIKICAibWluaW1hcCIKICAibm9yZC1hdG9tLXN5bnRheCIKICAicGFja2FnZS1zeW5jIgogICJwaWdtZW50cyIKICAicHJvdG8tcmVwbCIKICAic3dhY2tldHMiCiAgInRlbGV0eXBlIgogICJ0ZXJtaW5hbC10YWIiCiAgInRyYXZpcy1jaS1zdGF0dXMiCiAgInZpbS1tb2RlLXBsdXMiCiAgIndoaWNoLWtleSIKXQo='
G__11815='c2V0IGd1aWZvbnQ9SW5jb25zb2xhdGE6aDM4CnNldCBndWlvcHRpb25zPQpzZXQgdHJhbnNwYXJlbmN5PTE1CnNldCBibHVycmFkaXVzPTE1Cg=='
set '-e'
PATH='/bin:/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin'
if [[ -z $HOME ]]; then
printf '[:dots/status] '
echo ':dots/unknown-home'
exit 1
else
printf '[:system/home] '
echo '-n' '"'
printf $HOME | tr '-d' '\n'
echo '"'
fi
if [[ -z $HOST ]]; then
HOST=$(hostname )
printf '[:system/host-set?] '
echo 'false'
else
printf '[:system/host-set?] '
echo 'true'
fi
printf '[:system/host] '
echo '-n' '"'
printf $HOST | tr '-d' '\n'
echo '"'
printf '[:dots/install-time] '
echo '-n' '"'
date '-u' '+%Y-%m-%dT%H:%M:%SZ' | tr '-d' '\n'
echo '"'
printf '[:system/shell] '
echo '-n' '"'
printf $0 | tr '-d' '\n'
echo '"'
printf '[:system/kernel-name] '
echo '-n' '"'
uname '-s' | tr '-d' '\n'
echo '"'
printf '[:system/kernel-release] '
echo '-n' '"'
uname '-r' | tr '-d' '\n'
echo '"'
printf '[:system/machine] '
echo '-n' '"'
uname '-m' | tr '-d' '\n'
echo '"'
if [[ ! -d "$HOME/.vim/bundle/Vundle.vim" ]]; then
printf '[:vundle/init?] '
echo 'false'
git 'clone' 'https://github.com/VundleVim/Vundle.vim.git' "$HOME/.vim/bundle/Vundle.vim" &> '/dev/null'
else
printf '[:vundle/init?] '
echo 'true'
fi
set '-e'
if [[ ! -d "$HOME/.dots" ]]; then
git init '--bare' "$HOME/.dots" &> '/dev/null'
git "--git-dir=$HOME/.dots" config '--local' user.email 'a.s.badahdah@gmail.com' &> '/dev/null'
git "--git-dir=$HOME/.dots" config '--local' user.name 'Chris Badahdah' &> '/dev/null'
git "--git-dir=$HOME/.dots" config '--local' status.showUntrackedFiles no &> '/dev/null'
git "--git-dir=$HOME/.dots" "--work-tree=$HOME" commit '--allow-empty' '--message' 'Initializing dots repo' &> '/dev/null'
printf '[:dots/init?] '
echo 'false'
else
printf '[:dots/init?] '
echo 'true'
fi
G__11796=$(mktemp '-d')
trap "{ git "--git-dir=$HOME/.dots" "--work-tree=$G__11796" checkout master '-f' &> '/dev/null'; rm '-r' $G__11796; }" EXIT
git "--git-dir=$HOME/.dots" "--work-tree=$HOME" diff '--no-ext-diff' '--exit-code' &> '/dev/null' || { if [[ -z $FORCE_INSTALL ]]; then
printf '[:dots/status] '
echo ':dots/dirty'
exit 1
fi; }
git "--git-dir=$HOME/.dots" "--work-tree=$G__11796" checkout '--detach' &> '/dev/null'
pushd $G__11796 &> '/dev/null'
case $HOST in
red-machine)
mkdir '-p' 'bin'
printf $G__11798 | base64 '--decode' > 'bin/vim-wrap'
chmod '+x' 'bin/vim-wrap'
printf $G__11799 | base64 '--decode' > '.aliases'
printf $G__11800 | base64 '--decode' > '.bashrc'
printf $G__11801 | base64 '--decode' > '.profile'
printf $G__11802 | base64 '--decode' > '.tmux.conf'
printf $G__11803 | base64 '--decode' > '.zshrc'
printf $G__11804 | base64 '--decode' > '.gitconfig'
printf $G__11805 | base64 '--decode' > '.gvimrc'
printf 'c291cmNlIH4vLnZpbXJjCg==' | base64 '--decode' > '.ideavimrc'
printf $G__11806 | base64 '--decode' > '.vimrc'
mkdir '-p' '.config/nvim'
printf $G__11807 | base64 '--decode' > '.config/nvim/init.vim'
mkdir '-p' '.emacs.d'
printf $G__11808 | base64 '--decode' > '.emacs.d/init.el'
mkdir '-p' '.emacs.d'
printf $G__11809 | base64 '--decode' > '.emacs.d/settings.org'
mkdir '-p' '.clojure'
printf $G__11810 | base64 '--decode' > '.clojure/deps.edn'
mkdir '-p' '.atom'
printf $G__11811 | base64 '--decode' > '.atom/config.cson'
mkdir '-p' '.atom'
printf $G__11812 | base64 '--decode' > '.atom/keymap.cson'
mkdir '-p' '.atom'
printf $G__11813 | base64 '--decode' > '.atom/packages.cson'
mkdir '-p' '.atom'
printf $G__11814 | base64 '--decode' > '.atom/styles.less'
;;
archy)
mkdir '-p' 'bin'
printf $G__11798 | base64 '--decode' > 'bin/vim-wrap'
chmod '+x' 'bin/vim-wrap'
printf $G__11799 | base64 '--decode' > '.aliases'
printf $G__11800 | base64 '--decode' > '.bashrc'
printf $G__11801 | base64 '--decode' > '.profile'
printf $G__11802 | base64 '--decode' > '.tmux.conf'
printf $G__11803 | base64 '--decode' > '.zshrc'
printf $G__11804 | base64 '--decode' > '.gitconfig'
printf $G__11805 | base64 '--decode' > '.gvimrc'
printf 'c291cmNlIH4vLnZpbXJjCg==' | base64 '--decode' > '.ideavimrc'
printf $G__11806 | base64 '--decode' > '.vimrc'
mkdir '-p' '.config/nvim'
printf $G__11807 | base64 '--decode' > '.config/nvim/init.vim'
mkdir '-p' '.emacs.d'
printf $G__11808 | base64 '--decode' > '.emacs.d/init.el'
mkdir '-p' '.emacs.d'
printf $G__11809 | base64 '--decode' > '.emacs.d/settings.org'
mkdir '-p' '.clojure'
printf $G__11810 | base64 '--decode' > '.clojure/deps.edn'
mkdir '-p' '.atom'
printf $G__11811 | base64 '--decode' > '.atom/config.cson'
mkdir '-p' '.atom'
printf $G__11812 | base64 '--decode' > '.atom/keymap.cson'
mkdir '-p' '.atom'
printf $G__11813 | base64 '--decode' > '.atom/packages.cson'
mkdir '-p' '.atom'
printf $G__11814 | base64 '--decode' > '.atom/styles.less'
;;
archlinux)
mkdir '-p' 'bin'
printf $G__11798 | base64 '--decode' > 'bin/vim-wrap'
chmod '+x' 'bin/vim-wrap'
printf $G__11799 | base64 '--decode' > '.aliases'
printf $G__11800 | base64 '--decode' > '.bashrc'
printf $G__11801 | base64 '--decode' > '.profile'
printf $G__11802 | base64 '--decode' > '.tmux.conf'
printf $G__11803 | base64 '--decode' > '.zshrc'
printf $G__11804 | base64 '--decode' > '.gitconfig'
printf $G__11805 | base64 '--decode' > '.gvimrc'
printf 'c291cmNlIH4vLnZpbXJjCg==' | base64 '--decode' > '.ideavimrc'
printf $G__11806 | base64 '--decode' > '.vimrc'
mkdir '-p' '.config/nvim'
printf $G__11807 | base64 '--decode' > '.config/nvim/init.vim'
mkdir '-p' '.emacs.d'
printf $G__11808 | base64 '--decode' > '.emacs.d/init.el'
mkdir '-p' '.emacs.d'
printf $G__11809 | base64 '--decode' > '.emacs.d/settings.org'
mkdir '-p' '.clojure'
printf $G__11810 | base64 '--decode' > '.clojure/deps.edn'
mkdir '-p' '.atom'
printf $G__11811 | base64 '--decode' > '.atom/config.cson'
mkdir '-p' '.atom'
printf $G__11812 | base64 '--decode' > '.atom/keymap.cson'
mkdir '-p' '.atom'
printf $G__11813 | base64 '--decode' > '.atom/packages.cson'
mkdir '-p' '.atom'
printf $G__11814 | base64 '--decode' > '.atom/styles.less'
;;
osx)
mkdir '-p' 'bin'
printf $G__11798 | base64 '--decode' > 'bin/vim-wrap'
chmod '+x' 'bin/vim-wrap'
printf $G__11799 | base64 '--decode' > '.aliases'
printf $G__11800 | base64 '--decode' > '.bashrc'
printf $G__11801 | base64 '--decode' > '.profile'
printf $G__11802 | base64 '--decode' > '.tmux.conf'
printf $G__11803 | base64 '--decode' > '.zshrc'
printf $G__11804 | base64 '--decode' > '.gitconfig'
printf $G__11815 | base64 '--decode' > '.gvimrc'
printf 'c291cmNlIH4vLnZpbXJjCg==' | base64 '--decode' > '.ideavimrc'
printf $G__11806 | base64 '--decode' > '.vimrc'
mkdir '-p' '.config/nvim'
printf $G__11807 | base64 '--decode' > '.config/nvim/init.vim'
mkdir '-p' '.emacs.d'
printf $G__11808 | base64 '--decode' > '.emacs.d/init.el'
mkdir '-p' '.emacs.d'
printf $G__11809 | base64 '--decode' > '.emacs.d/settings.org'
mkdir '-p' '.clojure'
printf $G__11810 | base64 '--decode' > '.clojure/deps.edn'
mkdir '-p' '.atom'
printf $G__11811 | base64 '--decode' > '.atom/config.cson'
mkdir '-p' '.atom'
printf $G__11812 | base64 '--decode' > '.atom/keymap.cson'
mkdir '-p' '.atom'
printf $G__11813 | base64 '--decode' > '.atom/packages.cson'
mkdir '-p' '.atom'
printf $G__11814 | base64 '--decode' > '.atom/styles.less'
;;
*)
mkdir '-p' 'bin'
printf $G__11798 | base64 '--decode' > 'bin/vim-wrap'
chmod '+x' 'bin/vim-wrap'
printf $G__11799 | base64 '--decode' > '.aliases'
printf $G__11800 | base64 '--decode' > '.bashrc'
printf $G__11801 | base64 '--decode' > '.profile'
printf $G__11802 | base64 '--decode' > '.tmux.conf'
printf $G__11803 | base64 '--decode' > '.zshrc'
printf $G__11804 | base64 '--decode' > '.gitconfig'
printf $G__11805 | base64 '--decode' > '.gvimrc'
printf 'c291cmNlIH4vLnZpbXJjCg==' | base64 '--decode' > '.ideavimrc'
printf $G__11806 | base64 '--decode' > '.vimrc'
mkdir '-p' '.config/nvim'
printf $G__11807 | base64 '--decode' > '.config/nvim/init.vim'
mkdir '-p' '.emacs.d'
printf $G__11808 | base64 '--decode' > '.emacs.d/init.el'
mkdir '-p' '.emacs.d'
printf $G__11809 | base64 '--decode' > '.emacs.d/settings.org'
mkdir '-p' '.clojure'
printf $G__11810 | base64 '--decode' > '.clojure/deps.edn'
mkdir '-p' '.atom'
printf $G__11811 | base64 '--decode' > '.atom/config.cson'
mkdir '-p' '.atom'
printf $G__11812 | base64 '--decode' > '.atom/keymap.cson'
mkdir '-p' '.atom'
printf $G__11813 | base64 '--decode' > '.atom/packages.cson'
mkdir '-p' '.atom'
printf $G__11814 | base64 '--decode' > '.atom/styles.less'
esac
popd  &> '/dev/null'
git "--git-dir=$HOME/.dots" "--work-tree=$G__11796" add '.' &> '/dev/null'
git "--git-dir=$HOME/.dots" "--work-tree=$G__11796" commit '--message' 'Ran install.sh' &> '/dev/null' || { if [[ -z $FORCE_INSTALL ]]; then
printf '[:dots/status] '
echo ':dots/unchanged'
exit 0
fi; }
G__11797=$(git "--git-dir=$HOME/.dots" "--work-tree=$G__11796" rev-parse HEAD)
git "--git-dir=$HOME/.dots" "--work-tree=$G__11796" checkout master '-f' &> '/dev/null'
git "--git-dir=$HOME/.dots" "--work-tree=$HOME" status &> '/dev/null'
git "--git-dir=$HOME/.dots" "--work-tree=$HOME" reset $(if [[ -z $FORCE_INSTALL ]]; then
echo '--merge'
else
echo '--hard'
fi) $G__11797 &> '/dev/null' || { printf '[:dots/status] '
echo ':dots/file-exists'; exit 1; }
printf '[:dots/files-changed] [ '
git "--git-dir=$HOME/.dots" "--work-tree=$HOME" diff '--name-only' 'HEAD~1' | sed '-E' 's/(.*)/"\1"/' | tr '\n' ' '
echo ']'
printf '[:dots/status] '
echo ':dots/success'
